using System;
public class Program
{
    public class BaseClass
    {
        public void DisplayName()
        {
            Console.WriteLine("BaseClass");
        }
    }

    public class DerivedClass:BaseClass
    {
        //컴파일러 경고: DisplayName()에서 상속된 멤버를 숨깁니다.
        //숨김을 의도한 경우 new 키워드 사용합니다.
        public virtual void DisplayName()
        {
            Console.WriteLine("DerivedClass");
        }
    }

    public class SubDerivedClass:DerivedClass
    {
        public override void DisplayName()
        {
            Console.WriteLine("SubDerivedClass");
        }
    }

    public class SuperSubDerivedClass:SubDerivedClass
    {
        public new void DisplayName()
        {
            Console.WriteLine("SuperSubDerivedClass");
        }
    }

    public static void Main()
    {
        SuperSubDerivedClass superSubDerivedClass = new SuperSubDerivedClass();

        SubDerivedClass subDerivedClass = superSubDerivedClass;
        DerivedClass derivedClass = superSubDerivedClass;
        BaseClass baseClass = superSubDerivedClass;

        superSubDerivedClass.DisplayName();
        subDerivedClass.DisplayName();
        derivedClass.DisplayName();
        baseClass.DisplayName();
    }
}

//SuperSubDerivedClass:SuperSubDerivedClass.DisplayName()은 파생된 클래스가 없고 이런
//이유로 오버로드가 없기 때문에 SuperSubDerivedClass를 표시한다.
//SubDerivedClass:SubDerivedClass.DisplayName()은 기본클래스의 가상 멤버를 재정의 하는
//최하위 파생 멤버다. SuperSubDerivedClass.DisplayName()는 new 한정자로 인해 숨겨진다.
//SubDerivedClass:DerivedClass.DisplayName()은 가상이고 SubDerivedClass.DisplayName()은
//이를 재정의하고 있는 최하위 파생 멤버다. 앞서처럼 new 한정자로 인해
//SuperSubDerivedClass.DisplayName()은 숨겨진다.
//BaseClass:BaseClass.DisplayName()은 기본 클래스 멤버를 재 선언하지 않았고 가상이 아니다.
//따라서 직접 호출된다.
